Method 01:Reverse a Linked List in groups of given size


class Solution
{
    public static Node reverse(Node node, int k)
    {
        //Your code here
        Node prev=null;
        Node temp=null;
        Node curr=node;
        int count=0;
        while(curr!=null&&count<k){
            temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
            count++;
        }
        if(temp!=null){
            node.next=reverse(temp,k);
        }
        return prev;
    }
}


Method 02: Reverse Nodes in k-Group(Leedcode)


class Solution {
   public static int size1(ListNode head)
    {
        int size=0;
        while(head!=null)
        {
            head=head.next;
            size++;
        }
        return size;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        
     ListNode curr=head;
       ListNode prev=null;
       ListNode nxt=curr;
       int count=0;
       int size=0;
      

      
      

        if(size1(head)<k && nxt!=null)
        {
           
           return nxt;
        }
        else
        {
       while(curr!=null && count<k )
       {
           nxt=curr.next;
           curr.next=prev;
           prev=curr;
           curr=nxt;
           count++;
       }
       if(nxt!=null)
       head.next=reverseKGroup(nxt,k);
        }
       return prev;
        
        
    }
}


