
Method:TC->O(N+M),SC->O(Max(N,M))
class Solution{
    //Function to add two numbers represented by linked list.
    
   
        // code here
        // return head of sum list
        static Node reverse(Node head){
            Node curr=head;
            Node prev=null;
            Node next=null;
            
            while(curr!=null){
                next=curr.next;
                curr.next=prev;
                prev=curr;
                curr=next;
            }
            return prev;
        }
        
        static Node add(Node first,Node second){
            Node dummy=new Node(-1);
            Node tail=dummy;
            int carry=0;
            
            while(first!=null||second!=null){
            int x=(first!=null)? first.data:0;
            int y=(second!=null)? second.data:0;
            
            int sum=x+y+carry;
            carry=sum/10;
            
            tail.next=new Node(sum%10);
            tail=tail.next;
            
            if(first!=null){
                first=first.next;
            }
            if(second!=null){
                second=second.next;
            }
        }
        
        if(carry>0){
            tail.next=new Node(carry);
            tail=tail.next;
        }
        return dummy.next;
}    
         static Node addTwoLists(Node first, Node second){
             first=reverse(first);
             second=reverse(second);
             
             Node ans=add(first,second);
             ans=reverse(ans);
             return ans;
    }
}


Method 02: Add Two Numbers


class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode dummy=new ListNode(0);
        ListNode curr=dummy;
        int carry=0;
        while(l1!=null||l2!=null||carry==1){
            int sum=0;
            if(l1!=null){
                sum=sum+l1.val;
                l1=l1.next;
            }
            
            if(l2!=null){
                sum=sum+l2.val;
                l2=l2.next;
            }

            sum+=carry;
            carry=sum/10;
            ListNode node=new ListNode(sum%10);
            curr.next=node;
            curr=curr.next;
        }
        return dummy.next;
    }
}

