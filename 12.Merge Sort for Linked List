Method:TC->O(Log(N)),SC->O(N)

class Solution
{
       public static Node findMid(Node head){
       Node slow=head;
       Node fast=head.next;
       while(fast!=null && fast.next!=null){
           slow=slow.next;
           fast=fast.next.next;
           
       }
       return slow;
       
   }
   public static Node merge(Node left,Node right){
       Node newNode=new Node(-1);
       Node temp=newNode;
       while(left!=null && right!=null){
         if(left.data<right.data){
           temp.next=left;
           temp=left;
           left=left.next;
       } else{
            temp.next=right;
           temp=right;
           right=right.next;
       }  
       }
       while(left!=null){
           temp.next=left;
           temp=left;
           left=left.next;
       }
       while(right!=null){
          temp.next=right;
           temp=right;
           right=right.next;  
       }
       newNode=newNode.next;
       return newNode;
      
       
   }
    //Function to sort the given linked list using Merge Sort.
    static Node mergeSort(Node head)
    {
        // add your code here
         if(head==null || head.next==null){
           return head;
       }
       Node mid=findMid(head);
       Node left=head;
       Node right=mid.next;
       mid.next=null;
       left=mergeSort(left);
       right=mergeSort(right);
       Node res=merge(left,right);
       return res;
       
    }
}


