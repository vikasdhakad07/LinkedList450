Method 01: Linked List Cycle II


public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        HashSet<ListNode> hs=new HashSet<>();
        while(head!=null && !hs.contains(head)){
            hs.add(head);
            head=head.next;
        }
        return head;
    }
}


*************************************************************************************************************************************************


Method 02: Linked List Cycle II


public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow=head, fast=head;
        while(fast!=null && fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast){
                slow=head;
                while(slow!=fast){
                    slow=slow.next;
                    fast=fast.next;
                }
                return slow;
            }
        }
        return null;
    }
}
